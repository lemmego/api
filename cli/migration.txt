package main

import (
  "database/sql"
  "github.com/lemmego/migration"
)

func init() {
  migration.GetMigrator().AddMigration(&migration.Migration{
    Version: "{{.Version}}",
    Up:      mig_{{.Version}}_{{.Name}}_up,
    Down:    mig_{{.Version}}_{{.Name}}_down,
  })
}

func mig_{{.Version}}_{{.Name}}_up(tx *sql.Tx) error {
  schema := migration.Create("{{.TableName}}", func(t *migration.Table) {
{{- range .Fields}}
{{- $fieldLine := "t."}}
    {{- if .ForeignConstrained}}
        {{- $fieldLine = concat $fieldLine "ForeignID(\"" .Name "\").Constrained()"}}
    {{- else}}
        {{- $typeStr := (.Type | toCamel)}}
        {{- if eq .Type "string"}}
            {{- $typeStr = concat $typeStr "(\"" (.Name | toSnake) "\", 255)"}}
        {{- else if eq .Type "decimal"}}
            {{- $typeStr = concat $typeStr "(\"" (.Name | toSnake) "\", 8, 2)"}}
        {{- else if eq .Type "dateTime"}}
            {{- $typeStr = concat $typeStr "(\"" (.Name | toSnake) "\", 0)"}}
        {{- else}}
            {{- $typeStr = concat $typeStr "(\"" (.Name | toSnake) "\")"}}
        {{- end}}
        {{- $fieldLine = concat $fieldLine $typeStr}}

        {{- if .Primary}}
            {{- $fieldLine = concat $fieldLine ".Primary()"}}
        {{- end}}

        {{- if .Unique}}
            {{- $fieldLine = concat $fieldLine ".Unique()"}}
        {{- end}}

        {{- if .Nullable}}
            {{- $fieldLine = concat $fieldLine ".Nullable()"}}
        {{- end}}
    {{- end}}
    {{$fieldLine}}
{{- end}}

    {{- if gt (len .PrimaryColumns) 0}}
    {{- $pkLine := "t.PrimaryKey(\""}}
    {{- $pkLine = concat $pkLine (join .PrimaryColumns ", ")}}
    {{- $pkLine = concat $pkLine "\")"}}
    {{$pkLine}}
    {{- end}}

{{- range $i, $fcs := .ForeignColumns}}
    {{- if gt (len $fcs) 0}}
    {{- $fkLine := "t.Foreign(\""}}
    {{- $fkLine = concat $fkLine (join $fcs ", ")}}
    {{- $fkLine = concat $fkLine "\")"}}
    {{$fkLine}}
    {{- end}}
{{- end}}
  }).Build()

  if _, err := tx.Exec(schema); err != nil {
    return err
  }

  return nil
}

func mig_{{.Version}}_{{.Name}}_down(tx *sql.Tx) error {
  schema := migration.Drop("{{.TableName}}").Build()

  if _, err := tx.Exec(schema); err != nil {
    return err
  }

  return nil
}
